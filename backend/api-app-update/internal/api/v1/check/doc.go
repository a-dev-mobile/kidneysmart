/*
---методы---
HandlerContext: Удерживает зависимости, такие как база данных и логгер, которые могут быть использованы в HTTP обработчиках.

CheckForUpdate(c *gin.Context): Эта функция является HTTP-обработчиком, который реагирует на запросы о проверке наличия обновлений приложения.
Она проверяет входящий запрос, извлекает данные запроса, валидирует их и запускает процесс проверки обновления.

respondWithError(c *gin.Context, build int, message string): Вспомогательная функция, которая отправляет ответ с ошибкой клиенту.
Она принимает контекст запроса, код ошибки и сообщение об ошибке.

processUpdateCheck(ctx context.Context, updateReq request.AppUpdateRequest) (*response.AppUpdateResponse, error):
Основная функция логики, которая определяет, есть ли доступное обновление для приложения.
Она общается с базой данных, чтобы получить информацию об обновлении, и возвращает ответ, который говорит, нужно ли обновление.

determineUpdateType(buildNumber int, downloadInfo db.DownloadInfo) (string, *response.VersionInfo):
Функция анализирует текущую версию приложения и доступную информацию о загрузке, чтобы решить, требуется ли "жесткое" обновление, "мягкое" обновление или обновление не требуется.

getUpdateInfoFromDB(ctx context.Context, packageName, actualStore string) (*db.AppUpdateDb, error):
Эта функция взаимодействует с базой данных, чтобы извлечь информацию об обновлениях для конкретного пакета приложения и магазина приложений. Она обрабатывает ошибки, связанные с запросом в базу данных, и возвращает соответствующую информацию об обновлении или ошибку.


*/

/*

---принцип---

Получение запроса на обновление (CheckForUpdate): Когда пользователь приложения проверяет наличие обновлений,
на сервер поступает запрос. Этот запрос обрабатывается функцией CheckForUpdate.
Функция проверяет, правильно ли сформирован запрос, и проверяет данные запроса на соответствие ожидаемым
(например, номер версии приложения).

Обработка запроса (processUpdateCheck): Если данные запроса корректны, сервер использует другую функцию processUpdateCheck,
чтобы определить, нужно ли обновление для приложения пользователя.
Эта функция сверяет номер текущей версии приложения пользователя с последней версией в базе данных.

Взаимодействие с базой данных (getUpdateInfoFromDB): Функция getUpdateInfoFromDB используется для поиска информации
о последней версии приложения в базе данных. Это включает в себя проверку, существует ли информация
об обновлении для конкретного приложения.

Определение типа обновления (determineUpdateType): Если обновление доступно, функция determineUpdateType решает,
какого типа обновление требуется – "жесткое" (обязательное) или "мягкое" (необязательное).
"Жесткое" обновление может быть необходимо, если текущая версия приложения слишком старая и не поддерживается, а "мягкое" обновление предлагается, когда новая версия содержит важные, но не критические улучшения.

Отправка ответа пользователю (c.JSON): Наконец, сервер отправляет ответ обратно в приложение пользователя.
Этот ответ может сообщать, что обновление не требуется, или содержать информацию об обновлении,
включая, где скачать новую версию.


*/

// Package check предоставляет функции и типы для обработки запросов на проверку обновлений приложения.
// Этот пакет включает в себя обработку HTTP-запросов, взаимодействие с базой данных,
// а также логику определения необходимости и типа обновления приложения.
package check
